{"version":3,"sources":["services/phonebook.js","App.js","index.js"],"names":["baseURL","axios","get","person","post","id","delete","put","Notification","successMessage","failureMessage","className","style","color","Numbers","persons","deletePerson","map","key","Contact","name","number","onClick","float","marginRight","padding","backgroundColor","FilterBar","handleInputChange","filterExpression","type","value","onChange","PersonForm","addNewPersonHandler","newName","handleNameInputChange","newPhoneNumber","handlePhoneNumberInputChange","onSubmit","App","useState","setPersons","setNewName","setNewPhoneNumber","setFilterExpression","setSuccessMessage","setFailureMessage","useEffect","phonebookServices","then","response","data","personsToShow","filter","toLowerCase","includes","event","target","preventDefault","some","window","confirm","find","p","setTimeout","catch","error","newPerson","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRACMA,EAAO,eAME,EAJA,kBAAMC,IAAMC,IAAIF,IAIhB,EAHG,SAACG,GAAD,OAAYF,IAAMG,KAAKJ,EAASG,IAGnC,EAFM,SAACE,GAAD,OAAQJ,IAAMK,OAAN,UAAgBN,EAAhB,YAA2BK,KAEzC,EADM,SAACF,GAAD,OAAYF,IAAMM,IAAN,UAAaP,EAAb,YAAwBG,EAAOE,IAAMF,ICFhEK,EAAe,SAAC,GAAsD,IAAD,IAAnDC,sBAAmD,MAAlC,KAAkC,MAA5BC,sBAA4B,MAAX,KAAW,EAQzE,OAAuB,OAAnBA,EAEA,yBAAKC,UAAU,eAAeC,MANb,CACnBC,MAAO,QAMFH,GAKgB,OAAnBD,EAEA,yBAAKE,UAAU,eAAeC,MAjBb,CACnBC,MAAO,UAiBFJ,GAIA,MAGHK,EAAU,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC1B,OACE,4BACGD,EAAQE,KAAI,SAACd,GACZ,OACE,kBAAC,EAAD,CACEA,OAAQA,EACRe,IAAKf,EAAOE,GACZW,aAAcA,SAQpBG,EAAU,SAAC,GAA8B,IAA5BhB,EAA2B,EAA3BA,OAAQa,EAAmB,EAAnBA,aACzB,OACE,wBAAIL,UAAU,UACXR,EAAOiB,KADV,IACiBjB,EAAOkB,OACtB,4BACEC,QAAS,kBAAMN,EAAab,IAC5BS,MAAO,CACLW,MAAO,QACPC,YAAa,MACbC,QAAS,WACTC,gBAAiB,QANrB,UAcAC,EAAY,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,kBAAmBC,EAAuB,EAAvBA,iBACtC,OACE,2BAAOC,KAAK,OAAOC,MAAOF,EAAkBG,SAAUJ,KAIpDK,EAAa,SAAC,GAMb,IALLC,EAKI,EALJA,oBACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,sBACAC,EAEI,EAFJA,eACAC,EACI,EADJA,6BAEA,OACE,0BAAMC,SAAUL,GACd,qCAEE,2BAAOJ,KAAK,OAAOC,MAAOI,EAASH,SAAUI,KAE/C,6CAEE,2BACEN,KAAK,OACLC,MAAOM,EACPL,SAAUM,KAGd,4BAAQR,KAAK,SAASnB,UAAU,OAAhC,SAiIS6B,EA1HH,WAAM,MAEcC,mBAAS,IAFvB,mBAET1B,EAFS,KAEA2B,EAFA,OAGcD,mBAAS,IAHvB,mBAGTN,EAHS,KAGAQ,EAHA,OAI4BF,mBAAS,IAJrC,mBAITJ,EAJS,KAIOO,EAJP,OAKgCH,mBAAS,IALzC,mBAKTZ,EALS,KAKSgB,EALT,OAM4BJ,mBAAS,MANrC,mBAMThC,EANS,KAMOqC,EANP,OAO4BL,mBAAS,MAPrC,mBAOT/B,EAPS,KAOOqC,EAPP,KAUhBC,qBAAU,WACRC,IAA2BC,MAAK,SAACC,GAC/BT,EAAWS,EAASC,WAErB,IAGH,IA2EMC,EAAgBtC,EAAQuC,QAAO,SAACnD,GAAD,OACnCA,EAAOiB,KAAKmC,cAAcC,SAAS3B,EAAiB0B,kBAGtD,OACE,yBAAK5C,UAAU,aACb,yCACA,4CACA,kBAAC,EAAD,CACEiB,kBAb0B,SAAC6B,GAC/BZ,EAAoBY,EAAMC,OAAO3B,QAa7BF,iBAAkBA,IAEpB,2CACA,kBAAC,EAAD,CACEK,oBAzFe,SAACuB,GAIpB,GAHAA,EAAME,iBAGF5C,EAAQ6C,MAAK,SAACzD,GAAD,OAAYA,EAAOiB,OAASe,MAC3C,GACE0B,OAAOC,QAAP,UACK3B,EADL,iFAGA,CAEA,IAAMhC,EAAM,2BACPY,EAAQgD,MAAK,SAAC5D,GAAD,OAAYA,EAAOiB,OAASe,MADlC,IAEVd,OAAQgB,IAEVY,EACgB9C,GACb+C,MAAK,SAACC,GACLT,EAAW3B,EAAQE,KAAI,SAAC+C,GAAD,OAAQA,EAAE3D,KAAOF,EAAOE,GAAK2D,EAAI7D,MACxD2C,EAAkB,GAAD,OACZK,EAASC,KAAKhC,KADF,+BAGjB6C,YAAW,WACTnB,EAAkB,QACjB,KACHH,EAAW,IACXC,EAAkB,OAEnBsB,OAAM,SAACC,GACNzB,EAAW3B,EAAQuC,QAAO,SAACU,GAAD,OAAO7D,EAAOE,KAAO2D,EAAE3D,OACjD0C,EAAkB,GAAD,OACZ5C,EAAOiB,KADK,8CAGjB6C,YAAW,WACTlB,EAAkB,QACjB,aA/BX,CAsCA,IAAMqB,EAAY,CAAEhD,KAAMe,EAASd,OAAQgB,GAC3CY,EAA4BmB,GAAWlB,MAAK,YAAe,IAAZE,EAAW,EAAXA,KAC7CV,EAAW,GAAD,mBAAK3B,GAAL,CAAcqC,KACxBN,EAAkB,GAAD,OAAIsB,EAAUhD,KAAd,qCACjB6C,YAAW,WACTnB,EAAkB,QACjB,QAELH,EAAW,IACXC,EAAkB,MAuCdT,QAASA,EACTC,sBA1BwB,SAACqB,GAC7Bd,EAAWc,EAAMC,OAAO3B,QA0BpBM,eAAgBA,EAChBC,6BAzB+B,SAACmB,GACpCb,EAAkBa,EAAMC,OAAO3B,UA0B7B,uCACA,kBAAC,EAAD,CAAShB,QAASsC,EAAerC,aAzChB,SAACb,GAAY,IACxBE,EAAOF,EAAPE,GACJwD,OAAOC,QAAP,0CAAkD3D,EAAOiB,QAC3D6B,EAA+B5C,GAAI6C,MAAK,YAAc,EAAXE,KACzCV,EAAW3B,EAAQuC,QAAO,SAACnD,GAAD,OAAYA,EAAOE,KAAOA,YAsCtD,kBAAC,EAAD,CACEI,eAAgBA,EAChBC,eAAgBA,MCjNxB2D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.734f572e.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseURL = `/api/persons`;\r\n\r\nconst getAll = () => axios.get(baseURL);\r\nconst addPerson = (person) => axios.post(baseURL, person);\r\nconst deletePerson = (id) => axios.delete(`${baseURL}/${id}`);\r\nconst updatePerson = (person) => axios.put(`${baseURL}/${person.id}`, person);\r\nexport default {\r\n  getAll,\r\n  addPerson,\r\n  deletePerson,\r\n  updatePerson,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport phonebookServices from \"./services/phonebook\";\n// Components\nconst Notification = ({ successMessage = null, failureMessage = null }) => {\n  const successStyle = {\n    color: \"green\",\n  };\n  const failureStyle = {\n    color: \"red\",\n  };\n  // If there is a failure message\n  if (failureMessage !== null) {\n    return (\n      <div className=\"notification\" style={failureStyle}>\n        {failureMessage}\n      </div>\n    );\n  }\n  // If there is a success message\n  if (successMessage !== null) {\n    return (\n      <div className=\"notification\" style={successStyle}>\n        {successMessage}\n      </div>\n    );\n  }\n  return null;\n};\n\nconst Numbers = ({ persons, deletePerson }) => {\n  return (\n    <ul>\n      {persons.map((person) => {\n        return (\n          <Contact\n            person={person}\n            key={person.id}\n            deletePerson={deletePerson}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nconst Contact = ({ person, deletePerson }) => {\n  return (\n    <li className=\"person\">\n      {person.name} {person.number}\n      <button\n        onClick={() => deletePerson(person)}\n        style={{\n          float: \"right\",\n          marginRight: \"3px\",\n          padding: \"1px 10px\",\n          backgroundColor: \"red\",\n        }}>\n        &times;\n      </button>\n    </li>\n  );\n};\n\nconst FilterBar = ({ handleInputChange, filterExpression }) => {\n  return (\n    <input type=\"text\" value={filterExpression} onChange={handleInputChange} />\n  );\n};\n\nconst PersonForm = ({\n  addNewPersonHandler,\n  newName,\n  handleNameInputChange,\n  newPhoneNumber,\n  handlePhoneNumberInputChange,\n}) => {\n  return (\n    <form onSubmit={addNewPersonHandler}>\n      <div>\n        Name:\n        <input type=\"text\" value={newName} onChange={handleNameInputChange} />\n      </div>\n      <div>\n        Phone Number:\n        <input\n          type=\"text\"\n          value={newPhoneNumber}\n          onChange={handlePhoneNumberInputChange}\n        />\n      </div>\n      <button type=\"submit\" className=\"btn\">\n        Add\n      </button>\n    </form>\n  );\n};\n\nconst App = () => {\n  // States\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newPhoneNumber, setNewPhoneNumber] = useState(\"\");\n  const [filterExpression, setFilterExpression] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [failureMessage, setFailureMessage] = useState(null);\n\n  // Effects\n  useEffect(() => {\n    phonebookServices.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  // Submitting the form to add a new person to the phonebook\n  const addNewPerson = (event) => {\n    event.preventDefault();\n\n    // If the person's name is already in the phonebook\n    if (persons.some((person) => person.name === newName)) {\n      if (\n        window.confirm(\n          `${newName} is already added to the phonebook, replace the old number with the new one?`\n        )\n      ) {\n        // Update db with new person's details\n        const person = {\n          ...persons.find((person) => person.name === newName),\n          number: newPhoneNumber,\n        };\n        phonebookServices\n          .updatePerson(person)\n          .then((response) => {\n            setPersons(persons.map((p) => (p.id !== person.id ? p : person)));\n            setSuccessMessage(\n              `${response.data.name}'s number has been changed`\n            );\n            setTimeout(() => {\n              setSuccessMessage(null);\n            }, 5000);\n            setNewName(\"\");\n            setNewPhoneNumber(\"\");\n          })\n          .catch((error) => {\n            setPersons(persons.filter((p) => person.id !== p.id));\n            setFailureMessage(\n              `${person.name} has already been deleted from the server`\n            );\n            setTimeout(() => {\n              setFailureMessage(null);\n            }, 5000);\n          });\n      }\n      return;\n    }\n\n    // Actually adding a new name and phonenumber to the phonebook\n    const newPerson = { name: newName, number: newPhoneNumber };\n    phonebookServices.addPerson(newPerson).then(({ data }) => {\n      setPersons([...persons, data]);\n      setSuccessMessage(`${newPerson.name} has been added to the phonebook`);\n      setTimeout(() => {\n        setSuccessMessage(null);\n      }, 5000);\n    });\n    setNewName(\"\");\n    setNewPhoneNumber(\"\");\n  };\n\n  // Deleting users\n  const deletePerson = (person) => {\n    const { id } = person;\n    if (window.confirm(`Are you sure you want to delete ${person.name}`)) {\n      phonebookServices.deletePerson(id).then(({ data }) => {\n        setPersons(persons.filter((person) => person.id !== id));\n      });\n    }\n  };\n\n  // Controlled input onChange handlers\n  const handleNameInputChange = (event) => {\n    setNewName(event.target.value);\n  };\n  const handlePhoneNumberInputChange = (event) => {\n    setNewPhoneNumber(event.target.value);\n  };\n  const handleFilterInputChange = (event) => {\n    setFilterExpression(event.target.value);\n  };\n  // Choosing what people to display based on filter expression\n  const personsToShow = persons.filter((person) =>\n    person.name.toLowerCase().includes(filterExpression.toLowerCase())\n  );\n  // Render\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <h2>Find Contact</h2>\n      <FilterBar\n        handleInputChange={handleFilterInputChange}\n        filterExpression={filterExpression}\n      />\n      <h2>New Contact</h2>\n      <PersonForm\n        addNewPersonHandler={addNewPerson}\n        newName={newName}\n        handleNameInputChange={handleNameInputChange}\n        newPhoneNumber={newPhoneNumber}\n        handlePhoneNumberInputChange={handlePhoneNumberInputChange}\n      />\n      <h2>Numbers</h2>\n      <Numbers persons={personsToShow} deletePerson={deletePerson} />\n      <Notification\n        successMessage={successMessage}\n        failureMessage={failureMessage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}